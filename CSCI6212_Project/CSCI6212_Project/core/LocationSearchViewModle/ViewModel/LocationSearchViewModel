//
//  LocationSearchViewModel.swift
//  CSCI6212_Project
//
//  Created by Qi Liu on 9/6/23.
//

import Foundation
import MapKit

class LocationSearchViewModel: NSObject, ObservableObject{

    // MARK: - Properties

    @Published var results = [MKLocalSearchCompletion]()
    @Published var selectedLocation: CLLocationCoordinate2D?

    private let searchCompleter = MKLocalSearchCompleter()
    var queryFragment: String = "" {
        didset {
            searchCompleter.queryFragment = queryFragment
        }
    }

    // MARK: Lifecycle

    override init() {
        super.init()
        searchCompleter.delegate = self
        searchCompleter.queryFragment = queryFragment
    }

    // MARK: - Helpers

    func selectLoction(_ localSearch: MKLocalSearchCompletion) {
        locationSearch(forLocalSearchCompletion: localSearch) { response, error in
            if let error = error {
                print("DEBUG: Location search failed with error
                   \(error.localizedDescription)")
                return
            }
            guard let item = response?.mapItems.first else {return}
            let coordinate = item.placemark.coordinate
            self.selectedLocationCoordinate = coordinate
            print("DEBUG: Location coordinates \(coordinate)")
        }
    }

    func locationSearch(forLocalSearchCompletion localSearch: MKLocalSearchCompletion,
                        completion: @escaping MKlocalSearch.CompletionHandler) {
        let searchRequest = MKlocalSearch.Request()                    
        searchRequest.naturalLanguageQuery = localSearch.title.appending(localSearch.subtitle)                    
        let search = MKlocalSearch(request: searchRequest)

        search.start(CompletionHandler: completion)
    }
}

// MARK: - MKLocalSearchCompleterDelegate

extension LocationSearchViewModel: MKLocalSearchCompleterDelegate {
    func completerDidUpdateResults(_completer: MKLocalSearchCompleter) {
        self.results = completer.results
    }
}